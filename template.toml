#####
# Configuration file for iris-export-builder
# Syntax is TOML (https://toml.io/en/).

##### Details about the source files
[Source]

# The type of location:
# "directory": a filesystem directory, configured under [Directory]
# "github": a github tag, configured under [GitHub]
type = "github"

# The encoding of the source files; use valid Python encoding string,
# e.g. UTF-8 or CP1252. For a list of possible values, see
# https://docs.python.org/3.7/library/codecs.html#standard-encodings
# Default is UTF-8.
encoding = "UTF-8"

# The type of source code export: "xml" or "udl" (default).
srctype = "udl"

# Directory, relative to the repository root, to search for source
# files to include.
srcdir = 'src'

# Directory to search for CSP files, if any.
cspdir = 'csp'

# List of items to skip when building the export. Supports *-style wildcards.
# The items are matched against their full path from the root of the repository.
skip = [
]


# Details on what to do with CSP items
[CSP]

# How to handle the CSP export:
# - embed: CSP items are added to the export file. This is the default.
# - separate: a separate export file will be created for CSP items. The
#     name of the file will be the export name with _csp appended.
export = 'embed'


# One or more parsers for CSP items. The parsers use a regular expression
# to determine which part of a CSP path is the application, and which part
# the actual item. This is needed as an XML export item makes this
# distinction. Note that replacements can be hardcoded if needed.
# The default parser below assumes the first path component is the application,
# unless that is 'csp', in which case the first two components are used.
# Capture groups (surrounded by parenthesis) can be referred to in the
# replacement strings, using "\<group nr>". In the default parser below, the
# first group is used as application name, and the third one as item name.
# (The second one captures the the optional '/csp' part of the application name.
# It can be either '/csp' or empty, and is not used here.)
# Note the double brackets around the section name: they denote that
# more than one of these sections can be present.
# In most cases, is a single dedicated application is used, a simple
# configuration would be (assuming the application is called 'app'):
#   regex = '/app/(.+)'
#   app = '/app'
#   item = '\1'
# If more than one parser is present, the first match (if any) is used.
[[CSP.parsers]]

# The regular expression to use to match application and item.
regex = '((/csp)?/[^/]+)/(.+)'
# The application part; can use a capture group, e.g. '\1', or be hardcoded.
app = '\1'
# The item part can also use capture groups
item = '\3'
# What to do if a CSP item does not match this item:
# - error: raise a configuration error (details will be logged)
# - skip: just skip this item, and try the next parser (if any).
nomatch = 'error'


##### GitHub details
[GitHub]

# GitHub username (repo owner) and repository
user = ""
repo = ""

# What to create an export for. Anything for which GitHub can create a
# zip, e.g. release tags, branch names, commit ids (sha), etc.
tag = "master"

# GitHub security token to use (only needed for private repositories)
token = ''


##### Details about the directory containing the source files
[Directory]

# The path to the repository/checkout
path = ''

# The structure of the export: "flat" or "nested". If flat, only the
# directory specified above is scanned, which can improve performance.
# Otherwise files are scanned for recursively. Default is nested.
structure = "flat"


##### Server connection details: the server to use to convert UDL to XML.
[Server]

# Hostname or IP address
host = ""
# Cach√©/IRIS internal web server port
port = ""
# Namespace to use (any namespace will do)
namespace = "USER"
# Credentials; will be used in a basic auth header
user = ""
password = ''
# Whether to connect with HTTPS; should normally be off
https = false


##### Details about the export to build and logging
[Local]

# File to place output in. Supports escapes:
# {name}: top-level directory in filesystem or GitHub zip
# {cfgname}: name (without extension) of configuration file
# {timestamp}: Current date/time in format YYYY-MM-DDThh-mm
outfile = '{name}.xml'

# Whether to create an Ensemble deployment file. If not, a standard
# IRIS export file will be created. (Support for deployments is minimal,
# check the documentation.)
deployment = false

# Directory for the log file. If empty, the log file is placed adjacent to
# the configuration file. It will always have the name of the config file,
# with ".toml" replaced with ".log".
logdir = ''

